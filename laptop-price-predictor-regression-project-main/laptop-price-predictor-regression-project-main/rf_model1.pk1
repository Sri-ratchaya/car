import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
import pickle

# Load your data
df = pd.read_csv('laptop-price-predictor-regression-project-main/dataset.csv')

# Clean the 'Engine' column to remove non-numeric characters (e.g., '998 CC' -> 998)
df['Engine'] = df['Engine'].str.extract(r'(\d+)', expand=False)  # Using raw string (r'...')
df['Engine'] = pd.to_numeric(df['Engine'], errors='coerce')  # Convert to numeric, set errors to NaN

# Clean the 'Power' column similarly if needed
df['Power'] = df['Power'].str.extract(r'(\d+)', expand=False)  # Using raw string (r'...')
df['Power'] = pd.to_numeric(df['Power'], errors='coerce')  # Convert to numeric, set errors to NaN

# Extract features and target
X = df.drop('Price', axis=1)
y = df['Price']

# Define numeric and categorical features
numeric_features = ['Year', 'Kilometers_Driven', 'Engine', 'Power', 'Seats']
categorical_features = ['Name', 'Location', 'Fuel_Type', 'Transmission', 'Owner_Type']

# Define transformers
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),  # Mean imputation for numeric features
    ('scaler', StandardScaler())  # Scaling for numeric features
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),  # Most frequent imputation for categorical features
    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One hot encoding for categorical features
])

# Combine transformers in a column transformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Create the model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor())
])

# Train the model
model.fit(X, y)

# Save the trained model to a file
with open('rf_model.pkl', 'wb') as f:
    pickle.dump(model, f)
